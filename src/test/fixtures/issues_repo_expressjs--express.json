[
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3085",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3085/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3085/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3085/events",
    "html_url": "https://github.com/expressjs/express/issues/3085",
    "id": 176243140,
    "number": 3085,
    "title": "What is the best practice to place this kind of custom middleware function?",
    "user": {
      "login": "m31271n",
      "id": 12194646,
      "avatar_url": "https://avatars.githubusercontent.com/u/12194646?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/m31271n",
      "html_url": "https://github.com/m31271n",
      "followers_url": "https://api.github.com/users/m31271n/followers",
      "following_url": "https://api.github.com/users/m31271n/following{/other_user}",
      "gists_url": "https://api.github.com/users/m31271n/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/m31271n/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/m31271n/subscriptions",
      "organizations_url": "https://api.github.com/users/m31271n/orgs",
      "repos_url": "https://api.github.com/users/m31271n/repos",
      "events_url": "https://api.github.com/users/m31271n/events{/privacy}",
      "received_events_url": "https://api.github.com/users/m31271n/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2016-09-11T13:11:17Z",
    "updated_at": "2016-09-11T14:09:26Z",
    "closed_at": null,
    "body": "Man, I have a project whose hierarchy is like this:\r\n\r\n```\r\n├── app/\r\n├── config.js\r\n├── index.js\r\n├── node_modules/\r\n├── package.json\r\n└── routes/\r\n```\r\n\r\nCurrently, I place all my router in `routes`, these routes share one public middle function in `routes/middlewares/jwt-verifier.js`.\r\n\r\nI want to ask, what is the best practice to place this kind of custom middleware function?"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3078",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3078/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3078/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3078/events",
    "html_url": "https://github.com/expressjs/express/issues/3078",
    "id": 175637581,
    "number": 3078,
    "title": "Add info on running tests and code style to Collaborator's Guide",
    "user": {
      "login": "crandmck",
      "id": 2925364,
      "avatar_url": "https://avatars.githubusercontent.com/u/2925364?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/crandmck",
      "html_url": "https://github.com/crandmck",
      "followers_url": "https://api.github.com/users/crandmck/followers",
      "following_url": "https://api.github.com/users/crandmck/following{/other_user}",
      "gists_url": "https://api.github.com/users/crandmck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/crandmck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/crandmck/subscriptions",
      "organizations_url": "https://api.github.com/users/crandmck/orgs",
      "repos_url": "https://api.github.com/users/crandmck/repos",
      "events_url": "https://api.github.com/users/crandmck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/crandmck/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/docs",
        "name": "docs",
        "color": "d4c5f9"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 0,
    "created_at": "2016-09-08T00:26:42Z",
    "updated_at": "2016-09-08T00:27:00Z",
    "closed_at": null,
    "body": "Per discussion in the TC, we need to update https://github.com/expressjs/express/blob/master/Collaborator-Guide.md with info on coding style (cf. https://github.com/expressjs/discussions/issues/18) and how to run tests."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3073",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3073/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3073/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3073/events",
    "html_url": "https://github.com/expressjs/express/issues/3073",
    "id": 174367813,
    "number": 3073,
    "title": "modular support",
    "user": {
      "login": "zenithtekla",
      "id": 11691367,
      "avatar_url": "https://avatars.githubusercontent.com/u/11691367?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zenithtekla",
      "html_url": "https://github.com/zenithtekla",
      "followers_url": "https://api.github.com/users/zenithtekla/followers",
      "following_url": "https://api.github.com/users/zenithtekla/following{/other_user}",
      "gists_url": "https://api.github.com/users/zenithtekla/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zenithtekla/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zenithtekla/subscriptions",
      "organizations_url": "https://api.github.com/users/zenithtekla/orgs",
      "repos_url": "https://api.github.com/users/zenithtekla/repos",
      "events_url": "https://api.github.com/users/zenithtekla/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zenithtekla/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 10,
    "created_at": "2016-08-31T20:16:24Z",
    "updated_at": "2016-09-03T18:40:53Z",
    "closed_at": null,
    "body": "Man, your ExpressJS should support something like this:\r\ncore module configuration file (core.config.js) returns \r\n```js\r\nmodules[module] = {\r\n    name: module,\r\n    root: root,\r\n    view_path: view_path,\r\n    routes: routes,\r\n    view_engine: view_engine\r\n  };\r\n```\r\nand then, in server.js we can do:\r\n\r\n```js\r\n_.each(modules, function(module){\r\n      if(module){\r\n        app.set('root', module.root);\r\n        app.set('module_name', module.name);\r\n\r\n        require(module.routes)(app);\r\n        app.set('module_view', module.view_path);\r\n        app.set('module_view_engine', module.view_engine); \r\n        console.log(module.name, module.view_engine);\r\n      }\r\n    });\r\n```\r\n\r\n**OR better**\r\n\r\n```js\r\n_.each(modules, function(module){\r\n      if(module){\r\n        app.moduleSet(module);\r\n```\r\n\r\nSo we don't have to hack around! by pushing them (the views) to an array and unable to attain dynamic view engine on render. The views array is like a tiger skin, a unclassified combined mesh of things (views folders of every module) and it is not possible to set view_engine per module (per view_path).\r\n\r\n\r\n```js\r\n_.each(modules, function(module){\r\n      if(module){\r\n        app.set('root', module.root);\r\n        app.set('module_name', module.name);\r\n        require(module.routes)(app);\r\n        views.push(module.view_path);\r\n        view_engines.push(module.view_engine);        \r\n        // app.engine(module.view_engine, engines[module.view_engine]);\r\n        console.log(module.name, module.view_engine);\r\n      }\r\n    });\r\n    \r\n    /* swig & handlebars require engine to be declared\r\n    app.engine('html', swig.renderFile);\r\n    */\r\n\r\n\r\n    app.set('views', views);\r\n    app.set('view engine', 'pug');\r\n```\r\n\r\nThen, in our moduleA.controllers files, we have to do this: \r\n\r\n```js\r\nexports.todos = (req,res) => {\r\n  app.set('view engine', 'hjs');\r\n  // or with json\r\n  var config = require('../configs/module.config.json');\r\n  app.set('view engine', config.view_engine);\r\n  var todos = [\r\n    {\"task\":\"task1\", \"description\":\"task1_desc\"},\r\n    {\"task\":\"task2\", \"description\":\"task2_desc\"}\r\n  ];\r\n\r\n  // res.send('ok');\r\n  // res.json(todos);\r\n // for todo.hjs\r\n  res.render('todos', {\"todos\": todos});\r\n};\r\n\r\n```\r\nIn moduleB.controllers file, we have to the similar with 'pug' in place of 'hjs'. \r\nI don't know how the MEAN.js stack handles this, it seems working smoothly but requiring Grunt|Gulp and a lot of 'grunt work' picking up the views folder per module and render. Please enlighten me.\r\nLet me know how you guys handle the issues to be able to render different view engines per module for different views-routes.\r\n\r\ncurrent working project: https://github.com/zenithtekla/nodeMySQL"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3070",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3070/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3070/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3070/events",
    "html_url": "https://github.com/expressjs/express/pull/3070",
    "id": 174114347,
    "number": 3070,
    "title": "Implementing classes using the new ES6 syntax (branch 5.0)",
    "user": {
      "login": "leonardo-silva",
      "id": 7905740,
      "avatar_url": "https://avatars.githubusercontent.com/u/7905740?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardo-silva",
      "html_url": "https://github.com/leonardo-silva",
      "followers_url": "https://api.github.com/users/leonardo-silva/followers",
      "following_url": "https://api.github.com/users/leonardo-silva/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardo-silva/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardo-silva/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardo-silva/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardo-silva/orgs",
      "repos_url": "https://api.github.com/users/leonardo-silva/repos",
      "events_url": "https://api.github.com/users/leonardo-silva/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardo-silva/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-08-30T20:14:44Z",
    "updated_at": "2016-09-07T18:14:29Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/3070",
      "html_url": "https://github.com/expressjs/express/pull/3070",
      "diff_url": "https://github.com/expressjs/express/pull/3070.diff",
      "patch_url": "https://github.com/expressjs/express/pull/3070.patch"
    },
    "body": "I created a new PR to change the branches (5.0 -> 5.0).\r\nInitial PR: https://github.com/expressjs/express/pull/3069\r\n\r\nOriginal message: \r\nHi, \r\n\r\nIn my PhD research, I am using express in some experiments.\r\n\r\nAs a result, I detected the existence of at least 3 main \"classes\" in the current codebase (View, Route, Layer).\r\n\r\nSo, I decided to rewrite this code to follow the new syntax for classes provided by ECMAScript 2016, which I think is much more readable. All changes are just syntactical. I was also very careful to preserve the code style.\r\nFinally, all tests are green in the migrated code.\r\n\r\nDo you think it is worth to integrate these changes to the project?\r\n\r\nThank you"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3065",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3065/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3065/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3065/events",
    "html_url": "https://github.com/expressjs/express/issues/3065",
    "id": 173055077,
    "number": 3065,
    "title": "Redundant path-to-regexp computations in app.use",
    "user": {
      "login": "rohanpadhye",
      "id": 4233266,
      "avatar_url": "https://avatars.githubusercontent.com/u/4233266?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rohanpadhye",
      "html_url": "https://github.com/rohanpadhye",
      "followers_url": "https://api.github.com/users/rohanpadhye/followers",
      "following_url": "https://api.github.com/users/rohanpadhye/following{/other_user}",
      "gists_url": "https://api.github.com/users/rohanpadhye/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rohanpadhye/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rohanpadhye/subscriptions",
      "organizations_url": "https://api.github.com/users/rohanpadhye/orgs",
      "repos_url": "https://api.github.com/users/rohanpadhye/repos",
      "events_url": "https://api.github.com/users/rohanpadhye/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rohanpadhye/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-08-24T20:51:29Z",
    "updated_at": "2016-08-25T08:34:27Z",
    "closed_at": null,
    "body": "There seems to be a lot of redundant regexp construction when `app.use` is called with an array of middleware:\r\n\r\n```\r\napp.use(path, [f1, f2, f3])\r\n```\r\n\r\nA new layer is created for each middleware and the same path converted to a `RegExp` in the constructor of each layer. This effect gets exacerbated when `path` is itself an array of paths. For *M* paths and *N* middleware, there are *O(MN)* `RegExp` objects being created, though I feel only *O(M)* are really needed.\r\n\r\nHere is a [benchmark for a pathological case](https://gist.github.com/rohanpadhye/5bb00fefd8f6b0eb5675fced1a7baca3). When `M = N = 1000`, the call to `app.use` takes about **1.7 seconds** on my machine. \r\n\r\nIs there any reason why the regexp objects cannot be shared across all the layers? If all the layers share the regexp of the first layer, the same benchmark runs in only **7ms**. The patch is quite hacky and hence I have not submitted a PR, but I would like to confirm if my assumptions are correct. Please let me know if I have misunderstood something.\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3062",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3062/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3062/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3062/events",
    "html_url": "https://github.com/expressjs/express/issues/3062",
    "id": 172649335,
    "number": 3062,
    "title": "Debug namespace is not microservices (SOA) oriented",
    "user": {
      "login": "rafis",
      "id": 3502395,
      "avatar_url": "https://avatars.githubusercontent.com/u/3502395?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rafis",
      "html_url": "https://github.com/rafis",
      "followers_url": "https://api.github.com/users/rafis/followers",
      "following_url": "https://api.github.com/users/rafis/following{/other_user}",
      "gists_url": "https://api.github.com/users/rafis/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rafis/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rafis/subscriptions",
      "organizations_url": "https://api.github.com/users/rafis/orgs",
      "repos_url": "https://api.github.com/users/rafis/repos",
      "events_url": "https://api.github.com/users/rafis/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rafis/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 5,
    "created_at": "2016-08-23T09:14:56Z",
    "updated_at": "2016-08-25T10:57:14Z",
    "closed_at": null,
    "body": "Express uses hardcoded values for debug namespace, for example:\r\nhttps://github.com/expressjs/express/blob/b69b7605b07b41273acc931d25ab585377bcd107/lib/router/index.js#L20\r\n\r\nand it is extremly hard to determine in output where things are happening while doing TDD on microservices architecture. It would be nice to allow to specify prefix for namespace, i.e. per microservice which is an express app."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3061",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3061/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3061/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3061/events",
    "html_url": "https://github.com/expressjs/express/pull/3061",
    "id": 172572786,
    "number": 3061,
    "title": "Add test coverage for res.sendFile's \"cacheControl\" option and for various examples",
    "user": {
      "login": "ZLester",
      "id": 2387793,
      "avatar_url": "https://avatars.githubusercontent.com/u/2387793?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ZLester",
      "html_url": "https://github.com/ZLester",
      "followers_url": "https://api.github.com/users/ZLester/followers",
      "following_url": "https://api.github.com/users/ZLester/following{/other_user}",
      "gists_url": "https://api.github.com/users/ZLester/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ZLester/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ZLester/subscriptions",
      "organizations_url": "https://api.github.com/users/ZLester/orgs",
      "repos_url": "https://api.github.com/users/ZLester/repos",
      "events_url": "https://api.github.com/users/ZLester/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ZLester/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/tests",
        "name": "tests",
        "color": "944008"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2016-08-22T22:45:10Z",
    "updated_at": "2016-08-24T18:36:24Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/3061",
      "html_url": "https://github.com/expressjs/express/pull/3061",
      "diff_url": "https://github.com/expressjs/express/pull/3061.diff",
      "patch_url": "https://github.com/expressjs/express/pull/3061.patch"
    },
    "body": "This also required that I export both examples' `app` object and make the jade's examples use of morgan dependent on `env`."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3057",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3057/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3057/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3057/events",
    "html_url": "https://github.com/expressjs/express/issues/3057",
    "id": 171395998,
    "number": 3057,
    "title": "app.locals not passed down to a subapp",
    "user": {
      "login": "antpaw",
      "id": 108543,
      "avatar_url": "https://avatars.githubusercontent.com/u/108543?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antpaw",
      "html_url": "https://github.com/antpaw",
      "followers_url": "https://api.github.com/users/antpaw/followers",
      "following_url": "https://api.github.com/users/antpaw/following{/other_user}",
      "gists_url": "https://api.github.com/users/antpaw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antpaw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antpaw/subscriptions",
      "organizations_url": "https://api.github.com/users/antpaw/orgs",
      "repos_url": "https://api.github.com/users/antpaw/repos",
      "events_url": "https://api.github.com/users/antpaw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antpaw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2016-08-16T12:30:52Z",
    "updated_at": "2016-09-06T07:51:21Z",
    "closed_at": null,
    "body": "In this example I would expect that `appTitle` will be available to me, because this is what is says in [docs](http://expressjs.com/en/4x/api.html#app.locals). \r\n\r\n> The app.locals object has properties that are local variables within the application.\r\n\r\nThe same way I don't have to set the `'view engine'`, it just uses the one from the parent. But it's not the case, `appTitle` becomes `undefined`.\r\n\r\n```javascript\r\nvar express = require('express');\r\n\r\nvar app = module.exports = express();\r\n\r\napp.set('view engine', 'pug');\r\napp.locals.appTitle = 'yay';\r\n\r\nvar subapp = express();\r\n\r\nsubapp.get('/', function (req, res) {\r\n  res.render('index', {myVar: 'global var'});\r\n});\r\n\r\napp.use(subapp);\r\n\r\nvar port = 5000;\r\napp.listen(port, () => console.log('running on ' + port));\r\n```"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3052",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3052/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3052/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3052/events",
    "html_url": "https://github.com/expressjs/express/pull/3052",
    "id": 171017039,
    "number": 3052,
    "title": "Fixing current benchmark script errors",
    "user": {
      "login": "palanik",
      "id": 1656913,
      "avatar_url": "https://avatars.githubusercontent.com/u/1656913?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/palanik",
      "html_url": "https://github.com/palanik",
      "followers_url": "https://api.github.com/users/palanik/followers",
      "following_url": "https://api.github.com/users/palanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/palanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/palanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/palanik/subscriptions",
      "organizations_url": "https://api.github.com/users/palanik/orgs",
      "repos_url": "https://api.github.com/users/palanik/repos",
      "events_url": "https://api.github.com/users/palanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/palanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-08-13T16:52:21Z",
    "updated_at": "2016-08-31T03:25:40Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/3052",
      "html_url": "https://github.com/expressjs/express/pull/3052",
      "diff_url": "https://github.com/expressjs/express/pull/3052.diff",
      "patch_url": "https://github.com/expressjs/express/pull/3052.patch"
    },
    "body": "This PR is in response to #2108. I agree with @dougwilson on `benchmarks that do not use non-Node.js dependencies`. \r\n\r\nThe current benchmarking script was not touched for 3 years and has a dependency on [wrk](https://github.com/wg/wrk). No reference of this in the docs. If you run the script, you'll get errors.\r\n\r\nI submit this PR as a first step in fixing the current script and then moving towards using alternative/better benchmarking tools.\r\n(Prefer to keep the Master branch clean without errors)."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3050",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3050/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3050/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3050/events",
    "html_url": "https://github.com/expressjs/express/issues/3050",
    "id": 169657536,
    "number": 3050,
    "title": "Is it possible to share error handler middleware between express instances?",
    "user": {
      "login": "jshawl",
      "id": 3824954,
      "avatar_url": "https://avatars.githubusercontent.com/u/3824954?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jshawl",
      "html_url": "https://github.com/jshawl",
      "followers_url": "https://api.github.com/users/jshawl/followers",
      "following_url": "https://api.github.com/users/jshawl/following{/other_user}",
      "gists_url": "https://api.github.com/users/jshawl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jshawl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jshawl/subscriptions",
      "organizations_url": "https://api.github.com/users/jshawl/orgs",
      "repos_url": "https://api.github.com/users/jshawl/repos",
      "events_url": "https://api.github.com/users/jshawl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jshawl/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 1,
    "created_at": "2016-08-05T17:32:28Z",
    "updated_at": "2016-08-05T20:33:08Z",
    "closed_at": null,
    "body": "When using another express instance as middleware, the second instance's .use works fine, except as an error handler, with err as first argument\r\n\r\n```js\r\nvar app = require(\"express\")()\r\nvar app2 = require(\"express\")()\r\napp.get(\"/\", function(req, res){\r\n  res.send(\"normal response\")\r\n})\r\napp.get(\"/err\", function(req, res){\r\n  throw new Error()\r\n})\r\napp2.use(function(req, res, next){\r\n  res.send(\"404\") // this function is called when visiting non-existent route\r\n})\r\napp2.use(function(err, req, res, next){\r\n  res.send(\"error\") // this function is never invoked\r\n})\r\napp.use(app2)\r\napp.listen(3000)\r\n```"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3044",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3044/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3044/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3044/events",
    "html_url": "https://github.com/expressjs/express/issues/3044",
    "id": 168143459,
    "number": 3044,
    "title": "express@5.0.0-alpha.2 vulnerability - adding automated vulnerability checks ",
    "user": {
      "login": "YasharF",
      "id": 6448697,
      "avatar_url": "https://avatars.githubusercontent.com/u/6448697?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YasharF",
      "html_url": "https://github.com/YasharF",
      "followers_url": "https://api.github.com/users/YasharF/followers",
      "following_url": "https://api.github.com/users/YasharF/following{/other_user}",
      "gists_url": "https://api.github.com/users/YasharF/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YasharF/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YasharF/subscriptions",
      "organizations_url": "https://api.github.com/users/YasharF/orgs",
      "repos_url": "https://api.github.com/users/YasharF/repos",
      "events_url": "https://api.github.com/users/YasharF/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YasharF/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/low%20priority",
        "name": "low priority",
        "color": "cfd8dc"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 11,
    "created_at": "2016-07-28T16:49:32Z",
    "updated_at": "2016-07-28T17:21:08Z",
    "closed_at": null,
    "body": "I just saw on https://snyk.io/test/npm/express that express@5.0.0-alpha.2 depends on a npm module with a hi sev security vulnerability. \r\n\r\n1. Can the expressjs/express repo get integration to be monitor for new disclosures and check pull requests that introduce vulnerabilities?\r\nhttps://snyk.io/docs/github/#how-to-integrate-github-to-test-and-monitor-your-repositories\r\n\r\n2. Does anyone have an objection if we add a vulnerability badge to readme.md ?\r\n\r\n\r\n\r\n==============\r\n**Regular Expression Denial of Service**\r\n\r\nHigh severity\r\nVulnerable module: negotiator\r\nIntroduced through: accepts@1.2.13\r\nDetailed paths and remediation\r\n\r\nIntroduced through: express@5.0.0-alpha.2 › accepts@1.2.13 › negotiator@0.5.3\r\nRemediation: Upgrade to accepts@1.3.3.\r\nOverview\r\n\r\nnegotiator is an HTTP content negotiator for Node.js. Versions prior to 0.6.1 are vulnerable to Regular expression Denial of Service (ReDoS) attack when parsing \"Accept-Language\" http header.\r\n\r\nAn attacker can provide a long value in the Accept-Language header, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the thread and preventing it from processing other requests. By repeatedly sending multiple such requests, the attacker can make the server unavailable (a Denial of Service attack)."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3041",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3041/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3041/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3041/events",
    "html_url": "https://github.com/expressjs/express/issues/3041",
    "id": 166813372,
    "number": 3041,
    "title": "new tag for 5.0 alpha?",
    "user": {
      "login": "zackarychapple",
      "id": 2133184,
      "avatar_url": "https://avatars.githubusercontent.com/u/2133184?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zackarychapple",
      "html_url": "https://github.com/zackarychapple",
      "followers_url": "https://api.github.com/users/zackarychapple/followers",
      "following_url": "https://api.github.com/users/zackarychapple/following{/other_user}",
      "gists_url": "https://api.github.com/users/zackarychapple/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zackarychapple/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zackarychapple/subscriptions",
      "organizations_url": "https://api.github.com/users/zackarychapple/orgs",
      "repos_url": "https://api.github.com/users/zackarychapple/repos",
      "events_url": "https://api.github.com/users/zackarychapple/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zackarychapple/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-07-21T13:02:14Z",
    "updated_at": "2016-08-02T00:54:20Z",
    "closed_at": null,
    "body": "5.0-alpha.2 is the latest tag and it seems quite a ways behind the 5.0 branch. Any chance we can get a new tag cut?  "
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3039",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3039/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3039/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3039/events",
    "html_url": "https://github.com/expressjs/express/issues/3039",
    "id": 165913512,
    "number": 3039,
    "title": "Make it possible to configure the querystring parser *options*",
    "user": {
      "login": "wearhere",
      "id": 110000,
      "avatar_url": "https://avatars.githubusercontent.com/u/110000?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wearhere",
      "html_url": "https://github.com/wearhere",
      "followers_url": "https://api.github.com/users/wearhere/followers",
      "following_url": "https://api.github.com/users/wearhere/following{/other_user}",
      "gists_url": "https://api.github.com/users/wearhere/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wearhere/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wearhere/subscriptions",
      "organizations_url": "https://api.github.com/users/wearhere/orgs",
      "repos_url": "https://api.github.com/users/wearhere/repos",
      "events_url": "https://api.github.com/users/wearhere/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wearhere/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2016-07-16T06:31:05Z",
    "updated_at": "2016-07-28T21:46:34Z",
    "closed_at": null,
    "body": "[Over on `qs`' repository](https://github.com/ljharb/qs/issues/107) I and some others have identified an ambiguity in query string parsing that can be resolved by setting `arrayLimit: 0`. How may I do this? Ideally I would not have to set a custom string parsing _function_ on my application, which I see you support with the `'query parser'` setting [here](http://expressjs.com/en/api.html#app.set), but rather just pass some options to your default invocation of `qs.parse`.\r\n\r\nI see that you expose your `query` middleware, which [uses `qs.parse` by default](https://github.com/expressjs/express/blob/f3d99a4fdbe1531ea609e92c4d4ae6c269d78c7a/lib/middleware/query.js#L26), but unfortunately doing\r\n\r\n```js\r\nvar express = require('express');\r\nvar app = express();\r\n\r\napp.set('query parser', false);\r\napp.use(express.query({\r\n  arrayLimit: 0\r\n}));\r\n```\r\n\r\ndoes not suffice because with query parsing disabled, `req.query` is set to `{}` by the time that `express.query` runs, which causes it to [skip parsing](https://github.com/expressjs/express/blob/f3d99a4fdbe1531ea609e92c4d4ae6c269d78c7a/lib/middleware/query.js#L44).\r\n\r\n(Note: it would suffice for my purposes if you would add `arrayLimit: 0` to your default `qs.parse` options [here](https://github.com/expressjs/express/blob/f3d99a4fdbe1531ea609e92c4d4ae6c269d78c7a/lib/utils.js#L287) (and I suppose [here](https://github.com/expressjs/express/blob/f3d99a4fdbe1531ea609e92c4d4ae6c269d78c7a/lib/middleware/query.js#L40) even though that's not used by the framework) and perhaps you will consider doing so given that this ambiguity is problematic and `arrayLimit: 0` [may become the default](https://github.com/ljharb/qs/issues/107#issuecomment-233110210) in the next version of `qs`.)"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3037",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3037/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3037/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3037/events",
    "html_url": "https://github.com/expressjs/express/issues/3037",
    "id": 165267547,
    "number": 3037,
    "title": "TypeError: res.set is not a function",
    "user": {
      "login": "noopole",
      "id": 11869690,
      "avatar_url": "https://avatars.githubusercontent.com/u/11869690?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/noopole",
      "html_url": "https://github.com/noopole",
      "followers_url": "https://api.github.com/users/noopole/followers",
      "following_url": "https://api.github.com/users/noopole/following{/other_user}",
      "gists_url": "https://api.github.com/users/noopole/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/noopole/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/noopole/subscriptions",
      "organizations_url": "https://api.github.com/users/noopole/orgs",
      "repos_url": "https://api.github.com/users/noopole/repos",
      "events_url": "https://api.github.com/users/noopole/events{/privacy}",
      "received_events_url": "https://api.github.com/users/noopole/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": null,
    "comments": 10,
    "created_at": "2016-07-13T08:41:52Z",
    "updated_at": "2016-07-29T06:55:29Z",
    "closed_at": null,
    "body": "My server is scanned by the security team of my company to detect secutity flaws, and I've got a strange error in my  console:\r\n\r\nHere is the logged stack:\r\n> GET /mainui/ 404 2.194 ms - 9\r\n> TypeError: res.set is not a function\r\n>     at sendOptionsResponse (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:626:9)\r\n>     at c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:168:7\r\n>     at proxy (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:643:8)\r\n>     at next (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:256:14)\r\n>     at trim_prefix (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:286:45)\r\n>     at c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:280:7\r\n>     at Function.process_params (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:330:12)\r\n>     at next (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:271:10)\r\n>     at trim_prefix (c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:286:45)\r\n>     at c:\\git\\WebSite\\node_modules\\express\\lib\\router\\index.js:280:7\r\n>GET / 200 2.574 ms - 21440\r\n\r\nI'm using express 4.14.0\r\n\r\nIs it normal that such a function is not defined?\r\n\r\nCode around line 626 is:\r\n```\r\n// send an OPTIONS response\r\nfunction sendOptionsResponse(res, options, next) {\r\n  try {\r\n    var body = options.join(',');\r\n    res.set('Allow', body);\r\n    res.send(body);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n}\r\n```\r\n\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/3034",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/3034/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/3034/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/3034/events",
    "html_url": "https://github.com/expressjs/express/issues/3034",
    "id": 163802935,
    "number": 3034,
    "title": "Unexpected net::ERR_EMPTY_RESPONSE",
    "user": {
      "login": "ronag",
      "id": 3065230,
      "avatar_url": "https://avatars.githubusercontent.com/u/3065230?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ronag",
      "html_url": "https://github.com/ronag",
      "followers_url": "https://api.github.com/users/ronag/followers",
      "following_url": "https://api.github.com/users/ronag/following{/other_user}",
      "gists_url": "https://api.github.com/users/ronag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ronag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ronag/subscriptions",
      "organizations_url": "https://api.github.com/users/ronag/orgs",
      "repos_url": "https://api.github.com/users/ronag/repos",
      "events_url": "https://api.github.com/users/ronag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ronag/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-07-05T09:01:45Z",
    "updated_at": "2016-07-28T18:54:01Z",
    "closed_at": null,
    "body": "Given the following in express 4.14.0:\r\n\r\n```javascript\r\n   res.on('close', () => console.log('CLOSED', req.url))\r\n\r\n   console.log('WRITING', req.url)\r\n\r\n   const aborted = await new Promise((resolve, reject) => {\r\n     stream\r\n        .on('error', reject)\r\n        .on('end', () => resolve(false))\r\n        .pipe(res, { end: false })\r\n        .on('error', reject)\r\n        // 'close' is emitted if client prematurely disconnects.\r\n        .on('close', () => resolve(true))\r\n    })\r\n\r\n    if (aborted) {\r\n      console.log('ABORTED', req.url)\r\n      return\r\n    }\r\n\r\n    console.log('WRITTEN', req.url)\r\n\r\n    res.end()\r\n    console.log('END', req.url)\r\n```\r\n\r\nI get the following logs:\r\n\r\n```\r\nWRITING /v2/media/ciq8gm35600003k5g6c2rbqhs?profile[extends]=poster&dummy=284\r\nWRITTEN /v2/media/ciq8gm35600003k5g6c2rbqhs?profile[extends]=poster&dummy=284\r\nEND /v2/media/ciq8gm35600003k5g6c2rbqhs?profile[extends]=poster&dummy=284\r\n```\r\n\r\nBut Chrome (51.0.2704.106 (64-bit)) shows this:\r\n\r\n![screen shot 2016-07-04 at 22 11 14](https://cloud.githubusercontent.com/assets/3065230/16579369/b4eb964a-429f-11e6-8bcd-1f5fcbd019fe.png)\r\n\r\n![screen shot 2016-07-04 at 22 10 40](https://cloud.githubusercontent.com/assets/3065230/16579367/b10792f4-429f-11e6-8f9d-313ddf86749b.png)\r\n\r\nEven if there is something wrong with `stream` I would expect Chrome to receive the headers since `res.end()` is in fact called.\r\n\r\nThis happens intermittently and I'm unsure how to go about debugging this issue? Any ideas or suggestions?"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2987",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2987/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2987/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2987/events",
    "html_url": "https://github.com/expressjs/express/issues/2987",
    "id": 153754251,
    "number": 2987,
    "title": "Dollar sign not recognized in URL",
    "user": {
      "login": "jukkasi",
      "id": 8554087,
      "avatar_url": "https://avatars.githubusercontent.com/u/8554087?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jukkasi",
      "html_url": "https://github.com/jukkasi",
      "followers_url": "https://api.github.com/users/jukkasi/followers",
      "following_url": "https://api.github.com/users/jukkasi/following{/other_user}",
      "gists_url": "https://api.github.com/users/jukkasi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jukkasi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jukkasi/subscriptions",
      "organizations_url": "https://api.github.com/users/jukkasi/orgs",
      "repos_url": "https://api.github.com/users/jukkasi/repos",
      "events_url": "https://api.github.com/users/jukkasi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jukkasi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2016-05-09T11:15:30Z",
    "updated_at": "2016-07-06T06:45:27Z",
    "closed_at": null,
    "body": "Using ExpressJS 4 I'm not able to get a dollar sign to work in URL e.g.\r\n```js\r\napp.post('/foo/$bar', handler);\r\n```\r\n```\r\nCannot POST /foo/$bar\r\n```\r\nAccording to RFC dollar sign should be safe character, is it something I'm missing here?"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2982",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2982/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2982/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2982/events",
    "html_url": "https://github.com/expressjs/express/issues/2982",
    "id": 152005627,
    "number": 2982,
    "title": "Rendering engine without view files",
    "user": {
      "login": "davidmerfield",
      "id": 747928,
      "avatar_url": "https://avatars.githubusercontent.com/u/747928?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/davidmerfield",
      "html_url": "https://github.com/davidmerfield",
      "followers_url": "https://api.github.com/users/davidmerfield/followers",
      "following_url": "https://api.github.com/users/davidmerfield/following{/other_user}",
      "gists_url": "https://api.github.com/users/davidmerfield/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/davidmerfield/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/davidmerfield/subscriptions",
      "organizations_url": "https://api.github.com/users/davidmerfield/orgs",
      "repos_url": "https://api.github.com/users/davidmerfield/repos",
      "events_url": "https://api.github.com/users/davidmerfield/events{/privacy}",
      "received_events_url": "https://api.github.com/users/davidmerfield/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/ideas",
        "name": "ideas",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 14,
    "created_at": "2016-04-30T03:52:39Z",
    "updated_at": "2016-09-08T04:53:51Z",
    "closed_at": null,
    "body": "Hello! I want to write an express rendering engine which uses views retrieved from a database, not the file system. I've checked this repo's issue history and done a lot of googling but I've found nothing...\r\n\r\nIt seems express *requires* a view file to exist on disk before passing the req/res to a rendering engine. Is there a way to prevent this behaviour?\r\n\r\nIdeally, when I invoke ```res.render(name)```my rendering engine is called with ```(name, options, callback)``` without ```/[name].html``` necessarily existing on disk.\r\n\r\nI could overwrite express' ```res.render``` with my own renderer. However in order to handle errors properly it seems I'd have to pass in ```next``` each time I called ```res.render```. That seems repetitive.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2945",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2945/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2945/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2945/events",
    "html_url": "https://github.com/expressjs/express/issues/2945",
    "id": 141260051,
    "number": 2945,
    "title": "Make express.static use the \"etag\" application setting",
    "user": {
      "login": "sjanuary",
      "id": 14993288,
      "avatar_url": "https://avatars.githubusercontent.com/u/14993288?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sjanuary",
      "html_url": "https://github.com/sjanuary",
      "followers_url": "https://api.github.com/users/sjanuary/followers",
      "following_url": "https://api.github.com/users/sjanuary/following{/other_user}",
      "gists_url": "https://api.github.com/users/sjanuary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sjanuary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sjanuary/subscriptions",
      "organizations_url": "https://api.github.com/users/sjanuary/orgs",
      "repos_url": "https://api.github.com/users/sjanuary/repos",
      "events_url": "https://api.github.com/users/sjanuary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sjanuary/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-03-16T12:35:09Z",
    "updated_at": "2016-04-14T10:01:13Z",
    "closed_at": null,
    "body": "I saw this feature on the 5.0 roadmap #2237 and I initially thought that it would need to be implemented in the serve-static module (https://github.com/expressjs/serve-static/pull/64). I think maybe I had misunderstood the use case as the comments I received there were that the changes needed to be made in express.\r\n\r\nSo after getting it wrong the first time I wanted to open this issue as a discussion item around the requirements for this feature and how best to implement it.\r\n\r\nI think now the use case is this:\r\n\r\n```js\r\nvar express = require('express');\r\nvar app = express();\r\napp.disable('etag');\r\napp.use(express.static('/static')); // also disables etag without needing {'etag':false}\r\n```\r\n\r\nSo if etags are disabled **before** express.static is called then they are also disabled for static content.\r\n\r\nDoes this make sense? Any comments appreciated."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2943",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2943/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2943/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2943/events",
    "html_url": "https://github.com/expressjs/express/pull/2943",
    "id": 140675261,
    "number": 2943,
    "title": "Remove res.vary() (no arguments) signature",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/expressjs/express/milestones/11",
      "html_url": "https://github.com/expressjs/express/milestones/5.0",
      "labels_url": "https://api.github.com/repos/expressjs/express/milestones/11/labels",
      "id": 739972,
      "number": 11,
      "title": "5.0",
      "description": "",
      "creator": {
        "login": "Fishrock123",
        "id": 1093990,
        "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fishrock123",
        "html_url": "https://github.com/Fishrock123",
        "followers_url": "https://api.github.com/users/Fishrock123/followers",
        "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
        "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
        "repos_url": "https://api.github.com/users/Fishrock123/repos",
        "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 13,
      "closed_issues": 3,
      "state": "open",
      "created_at": "2014-08-01T16:41:47Z",
      "updated_at": "2016-06-20T04:45:47Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 12,
    "created_at": "2016-03-14T13:37:16Z",
    "updated_at": "2016-06-20T09:08:51Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2943",
      "html_url": "https://github.com/expressjs/express/pull/2943",
      "diff_url": "https://github.com/expressjs/express/pull/2943.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2943.patch"
    },
    "body": "Changed `res.vary()` to throw `TypeError` if no `field` argument is passed or if the value of `field` argument is an empty array. (Similar to how `res.sendFile()` deals with a missing `path` argument)."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2942",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2942/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2942/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2942/events",
    "html_url": "https://github.com/expressjs/express/pull/2942",
    "id": 140664524,
    "number": 2942,
    "title": "Remove res.send(status, body) signature",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-03-14T12:48:34Z",
    "updated_at": "2016-06-20T16:04:31Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2942",
      "html_url": "https://github.com/expressjs/express/pull/2942",
      "diff_url": "https://github.com/expressjs/express/pull/2942.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2942.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2941",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2941/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2941/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2941/events",
    "html_url": "https://github.com/expressjs/express/pull/2941",
    "id": 140658273,
    "number": 2941,
    "title": "Remove res.redirect(url, status) signature",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 3,
    "created_at": "2016-03-14T12:16:51Z",
    "updated_at": "2016-06-20T16:08:07Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2941",
      "html_url": "https://github.com/expressjs/express/pull/2941",
      "diff_url": "https://github.com/expressjs/express/pull/2941.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2941.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2940",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2940/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2940/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2940/events",
    "html_url": "https://github.com/expressjs/express/pull/2940",
    "id": 140658174,
    "number": 2940,
    "title": "Remove res.jsonp(status, obj) signature",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 4,
    "created_at": "2016-03-14T12:16:17Z",
    "updated_at": "2016-06-20T16:09:37Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2940",
      "html_url": "https://github.com/expressjs/express/pull/2940",
      "diff_url": "https://github.com/expressjs/express/pull/2940.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2940.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2939",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2939/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2939/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2939/events",
    "html_url": "https://github.com/expressjs/express/pull/2939",
    "id": 140658052,
    "number": 2939,
    "title": "Remove res.json(status, obj) signature",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "assignees": [
      {
        "login": "dougwilson",
        "id": 67512,
        "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dougwilson",
        "html_url": "https://github.com/dougwilson",
        "followers_url": "https://api.github.com/users/dougwilson/followers",
        "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
        "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
        "organizations_url": "https://api.github.com/users/dougwilson/orgs",
        "repos_url": "https://api.github.com/users/dougwilson/repos",
        "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dougwilson/received_events",
        "type": "User",
        "site_admin": false
      }
    ],
    "milestone": {
      "url": "https://api.github.com/repos/expressjs/express/milestones/11",
      "html_url": "https://github.com/expressjs/express/milestones/5.0",
      "labels_url": "https://api.github.com/repos/expressjs/express/milestones/11/labels",
      "id": 739972,
      "number": 11,
      "title": "5.0",
      "description": "",
      "creator": {
        "login": "Fishrock123",
        "id": 1093990,
        "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fishrock123",
        "html_url": "https://github.com/Fishrock123",
        "followers_url": "https://api.github.com/users/Fishrock123/followers",
        "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
        "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
        "repos_url": "https://api.github.com/users/Fishrock123/repos",
        "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 13,
      "closed_issues": 3,
      "state": "open",
      "created_at": "2014-08-01T16:41:47Z",
      "updated_at": "2016-06-20T04:45:47Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 13,
    "created_at": "2016-03-14T12:15:49Z",
    "updated_at": "2016-06-20T16:10:25Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2939",
      "html_url": "https://github.com/expressjs/express/pull/2939",
      "diff_url": "https://github.com/expressjs/express/pull/2939.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2939.patch"
    },
    "body": ""
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2936",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2936/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2936/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2936/events",
    "html_url": "https://github.com/expressjs/express/pull/2936",
    "id": 140430741,
    "number": 2936,
    "title": "res.sendFile: inherit etag setting from app",
    "user": {
      "login": "retep007",
      "id": 6537500,
      "avatar_url": "https://avatars.githubusercontent.com/u/6537500?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/retep007",
      "html_url": "https://github.com/retep007",
      "followers_url": "https://api.github.com/users/retep007/followers",
      "following_url": "https://api.github.com/users/retep007/following{/other_user}",
      "gists_url": "https://api.github.com/users/retep007/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/retep007/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/retep007/subscriptions",
      "organizations_url": "https://api.github.com/users/retep007/orgs",
      "repos_url": "https://api.github.com/users/retep007/repos",
      "events_url": "https://api.github.com/users/retep007/events{/privacy}",
      "received_events_url": "https://api.github.com/users/retep007/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": {
      "url": "https://api.github.com/repos/expressjs/express/milestones/11",
      "html_url": "https://github.com/expressjs/express/milestones/5.0",
      "labels_url": "https://api.github.com/repos/expressjs/express/milestones/11/labels",
      "id": 739972,
      "number": 11,
      "title": "5.0",
      "description": "",
      "creator": {
        "login": "Fishrock123",
        "id": 1093990,
        "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fishrock123",
        "html_url": "https://github.com/Fishrock123",
        "followers_url": "https://api.github.com/users/Fishrock123/followers",
        "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
        "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
        "repos_url": "https://api.github.com/users/Fishrock123/repos",
        "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 13,
      "closed_issues": 3,
      "state": "open",
      "created_at": "2014-08-01T16:41:47Z",
      "updated_at": "2016-06-20T04:45:47Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 3,
    "created_at": "2016-03-13T00:31:55Z",
    "updated_at": "2016-05-31T21:11:34Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2936",
      "html_url": "https://github.com/expressjs/express/pull/2936",
      "diff_url": "https://github.com/expressjs/express/pull/2936.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2936.patch"
    },
    "body": "feature mentioned in:  #2294 \r\n\r\nIf ETag is disabled in app settings, res.sendFile inherits this setting in options object\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2935",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2935/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2935/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2935/events",
    "html_url": "https://github.com/expressjs/express/pull/2935",
    "id": 140186517,
    "number": 2935,
    "title": "Add support for overriding settings per request",
    "user": {
      "login": "tunniclm",
      "id": 5011883,
      "avatar_url": "https://avatars.githubusercontent.com/u/5011883?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tunniclm",
      "html_url": "https://github.com/tunniclm",
      "followers_url": "https://api.github.com/users/tunniclm/followers",
      "following_url": "https://api.github.com/users/tunniclm/following{/other_user}",
      "gists_url": "https://api.github.com/users/tunniclm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tunniclm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tunniclm/subscriptions",
      "organizations_url": "https://api.github.com/users/tunniclm/orgs",
      "repos_url": "https://api.github.com/users/tunniclm/repos",
      "events_url": "https://api.github.com/users/tunniclm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tunniclm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-03-11T13:46:50Z",
    "updated_at": "2016-03-15T01:02:59Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2935",
      "html_url": "https://github.com/expressjs/express/pull/2935",
      "diff_url": "https://github.com/expressjs/express/pull/2935.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2935.patch"
    },
    "body": "This commit adds `res.settings`, an object on to which properties can be defined that will override application settings within Express internals (the values returned from `app.get()` are not altered, therefore any middleware/components that wants to respect the override would need to be updated to use `res.settings` instead of `app.get()`).\r\n\r\nAt present, this affects the following settings:\r\n* view\r\n* view engine\r\n* views\r\n* etag fn\r\n* json replacer\r\n* json spaces\r\n* jsonp callback name\r\n\r\nThe `res.settings` object is passed through to view rendering code by adding property `_settings` to the `options` parameter of `app.render()`.\r\n\r\nThe entry key for the view cache was changed to prepend the `views` setting to ensure the cache continues to work correctly if `views` is overridden to a different value (eg if view `'users'` was cached\r\nfrom `/projdir/views/a` but `views` was overridden to point to `/projdir/views/b` for this request, it should not retrieve the `'users'` view from the cache for `/projdir/views/a`).\r\n\r\n`res.settings` sets its `__proto__` to be the `settings` property of the current application so settings read from the object will default to the application settings.\r\n\r\nAs the request progresses through routing, the `__proto__` will be updated to ensure values always defalt to the settings of the current application.\r\n\r\n----\r\n\r\nFixes #2849"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2926",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2926/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2926/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2926/events",
    "html_url": "https://github.com/expressjs/express/pull/2926",
    "id": 138337288,
    "number": 2926,
    "title": "Adding additional template variable scopes",
    "user": {
      "login": "gfoust",
      "id": 1664161,
      "avatar_url": "https://avatars.githubusercontent.com/u/1664161?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gfoust",
      "html_url": "https://github.com/gfoust",
      "followers_url": "https://api.github.com/users/gfoust/followers",
      "following_url": "https://api.github.com/users/gfoust/following{/other_user}",
      "gists_url": "https://api.github.com/users/gfoust/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gfoust/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gfoust/subscriptions",
      "organizations_url": "https://api.github.com/users/gfoust/orgs",
      "repos_url": "https://api.github.com/users/gfoust/repos",
      "events_url": "https://api.github.com/users/gfoust/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gfoust/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/ideas",
        "name": "ideas",
        "color": "d7e102"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 7,
    "created_at": "2016-03-04T00:15:41Z",
    "updated_at": "2016-04-26T08:38:36Z",
    "closed_at": null,
    "pull_request": {
      "url": "https://api.github.com/repos/expressjs/express/pulls/2926",
      "html_url": "https://github.com/expressjs/express/pull/2926",
      "diff_url": "https://github.com/expressjs/express/pull/2926.diff",
      "patch_url": "https://github.com/expressjs/express/pull/2926.patch"
    },
    "body": "This is a follow up to #2924.  It addresses the issue of exposing session variables to template engines using a more general approach.  Note that unlike #2924, this request does not involve exposing scopes explicitly using certain names.\r\n\r\nEach response (potentially) has a stack of template variable scopes.  Each scope is an object whose properties define the variables to be exposed.  A method was added to the response object named `addTmplVars`.  The parameter to this method is a scope to be pushed on the scope stack.  Here is an example:\r\n\r\n```javascript\r\nres.addTmplVars({ name: 'gfoust', count: 3 });\r\n```\r\n\r\nThe scope is stored directly on the scope stack.  Therefore, any changes made to that scope will be visible to the template engine.  For example, the following code listing has the same effect as the previous one.\r\n\r\n```javascript\r\nvar obj = {};\r\nres.addTmplVars(obj);\r\nobj.name = 'gfoust';\r\nobj.count = 3;\r\n```\r\n\r\nWhen a template is rendered, the objects on the scope stack are \"flattened\" into a single object.  This \"flattening\" does not alter the scopes in any way; it merely copies their properties to a new object.  In the case of conflicts, variables from scopes higher up in the stack will replace those from scopes lower in the stack.\r\n\r\nPrior to this \"flattening\", the variables of `app.locals` are effectively added to the bottom of the stack, and variables from `res.locals` are added to the top of the stack, followed by variables passed to `res.render`.  This augmented stack may be represented as follows:\r\n\r\nvariables passed to `res.render` -> `res.locals` -> scope stack (high to low) -> `app.locals`\r\n\r\nThe arrows here represent precedence:  variables from scopes on the left of the arrow will override variables from scopes on the right should a conflict occur.\r\n\r\nThe idea here is that any middleware can expose a scope to the template engine.  For example, when using express-session, it could push the session object onto the scope stack, allowing session variables to be directly accessed by the template.  Should multiple middlewares push scopes to the stack, the order in which they execute will define precedence.\r\n\r\nI used the `tmplVars` property of the response object to hold the scope stack.  I would expect this to be considered a private variable.  The property is not created until the first time `addTmplVars` is called."
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2923",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2923/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2923/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2923/events",
    "html_url": "https://github.com/expressjs/express/issues/2923",
    "id": 138062842,
    "number": 2923,
    "title": "express/examples",
    "user": {
      "login": "lordKnighton",
      "id": 1773260,
      "avatar_url": "https://avatars.githubusercontent.com/u/1773260?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lordKnighton",
      "html_url": "https://github.com/lordKnighton",
      "followers_url": "https://api.github.com/users/lordKnighton/followers",
      "following_url": "https://api.github.com/users/lordKnighton/following{/other_user}",
      "gists_url": "https://api.github.com/users/lordKnighton/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lordKnighton/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lordKnighton/subscriptions",
      "organizations_url": "https://api.github.com/users/lordKnighton/orgs",
      "repos_url": "https://api.github.com/users/lordKnighton/repos",
      "events_url": "https://api.github.com/users/lordKnighton/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lordKnighton/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/examples",
        "name": "examples",
        "color": "5319e7"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 20,
    "created_at": "2016-03-03T03:19:36Z",
    "updated_at": "2016-09-07T20:50:07Z",
    "closed_at": null,
    "body": "@dougwilson I'd like to start working new `express/examples` They're pretty old currently. \r\n\r\nWhat are you're thoughts on this? \r\n> The majority of these are 2 years, there are a few, just a tad old. "
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2922",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2922/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2922/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2922/events",
    "html_url": "https://github.com/expressjs/express/issues/2922",
    "id": 138019681,
    "number": 2922,
    "title": "Contribution Report 3/2/2016",
    "user": {
      "login": "mikeal",
      "id": 579,
      "avatar_url": "https://avatars.githubusercontent.com/u/579?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mikeal",
      "html_url": "https://github.com/mikeal",
      "followers_url": "https://api.github.com/users/mikeal/followers",
      "following_url": "https://api.github.com/users/mikeal/following{/other_user}",
      "gists_url": "https://api.github.com/users/mikeal/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mikeal/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mikeal/subscriptions",
      "organizations_url": "https://api.github.com/users/mikeal/orgs",
      "repos_url": "https://api.github.com/users/mikeal/repos",
      "events_url": "https://api.github.com/users/mikeal/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mikeal/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/meta",
        "name": "meta",
        "color": "fef2c0"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 17,
    "created_at": "2016-03-02T23:00:27Z",
    "updated_at": "2016-03-10T00:04:32Z",
    "closed_at": null,
    "body": "I ran this quick contribution report across all the repos in all 3 orgs (expressjs, pillarjs, jshttp). This shows all contributors from January 1st 2016.\r\n\r\nIf we want to go back a little further it's easy enough to adjust that variable.\r\n\r\nTotal Commits:  285\r\n* **[@dougwilson](https://github.com/dougwilson)**\r\n  * 12 in [expressjs/express](https://github.com/expressjs/express/commits?author=dougwilson)\r\n  * 5 in [expressjs/compression](https://github.com/expressjs/compression/commits?author=dougwilson)\r\n  * 10 in [expressjs/body-parser](https://github.com/expressjs/body-parser/commits?author=dougwilson)\r\n  * 4 in [expressjs/serve-favicon](https://github.com/expressjs/serve-favicon/commits?author=dougwilson)\r\n  * 6 in [expressjs/morgan](https://github.com/expressjs/morgan/commits?author=dougwilson)\r\n  * 2 in [expressjs/cookie-parser](https://github.com/expressjs/cookie-parser/commits?author=dougwilson)\r\n  * 13 in [expressjs/session](https://github.com/expressjs/session/commits?author=dougwilson)\r\n  * 6 in [expressjs/cookie-session](https://github.com/expressjs/cookie-session/commits?author=dougwilson)\r\n  * 3 in [expressjs/errorhandler](https://github.com/expressjs/errorhandler/commits?author=dougwilson)\r\n  * 19 in [expressjs/csurf](https://github.com/expressjs/csurf/commits?author=dougwilson)\r\n  * 9 in [expressjs/serve-index](https://github.com/expressjs/serve-index/commits?author=dougwilson)\r\n  * 6 in [expressjs/serve-static](https://github.com/expressjs/serve-static/commits?author=dougwilson)\r\n  * 4 in [jshttp/methods](https://github.com/jshttp/methods/commits?author=dougwilson)\r\n  * 5 in [jshttp/compressible](https://github.com/jshttp/compressible/commits?author=dougwilson)\r\n  * 5 in [jshttp/accepts](https://github.com/jshttp/accepts/commits?author=dougwilson)\r\n  * 9 in [jshttp/type-is](https://github.com/jshttp/type-is/commits?author=dougwilson)\r\n  * 13 in [jshttp/statuses](https://github.com/jshttp/statuses/commits?author=dougwilson)\r\n  * 10 in [jshttp/mime-types](https://github.com/jshttp/mime-types/commits?author=dougwilson)\r\n  * 2 in [jshttp/proxy-addr](https://github.com/jshttp/proxy-addr/commits?author=dougwilson)\r\n  * 10 in [jshttp/etag](https://github.com/jshttp/etag/commits?author=dougwilson)\r\n  * 7 in [jshttp/mime-db](https://github.com/jshttp/mime-db/commits?author=dougwilson)\r\n  * 6 in [jshttp/http-errors](https://github.com/jshttp/http-errors/commits?author=dougwilson)\r\n  * 3 in [jshttp/content-disposition](https://github.com/jshttp/content-disposition/commits?author=dougwilson)\r\n  * 13 in [pillarjs/cookies](https://github.com/pillarjs/cookies/commits?author=dougwilson)\r\n  * 8 in [pillarjs/send](https://github.com/pillarjs/send/commits?author=dougwilson)\r\n  * 4 in [pillarjs/parseurl](https://github.com/pillarjs/parseurl/commits?author=dougwilson)\r\n  * 4 in [pillarjs/resolve-path](https://github.com/pillarjs/resolve-path/commits?author=dougwilson)\r\n  * 14 in [pillarjs/csrf](https://github.com/pillarjs/csrf/commits?author=dougwilson)\r\n  * 5 in [pillarjs/router](https://github.com/pillarjs/router/commits?author=dougwilson)\r\n* **[@jordonias](https://github.com/jordonias)**\r\n  * 1 in [expressjs/express](https://github.com/expressjs/express/commits?author=jordonias)\r\n* **[@andyfleming](https://github.com/andyfleming)**\r\n  * 1 in [expressjs/express](https://github.com/expressjs/express/commits?author=andyfleming)\r\n* **[@sjanuary](https://github.com/sjanuary)**\r\n  * 1 in [expressjs/express](https://github.com/expressjs/express/commits?author=sjanuary)\r\n* **[@segmentationfaulter](https://github.com/segmentationfaulter)**\r\n  * 1 in [expressjs/express](https://github.com/expressjs/express/commits?author=segmentationfaulter)\r\n* **[@mikeal](https://github.com/mikeal)**\r\n  * 1 in [expressjs/express](https://github.com/expressjs/express/commits?author=mikeal)\r\n* **[@lazywithclass](https://github.com/lazywithclass)**\r\n  * 1 in [expressjs/body-parser](https://github.com/expressjs/body-parser/commits?author=lazywithclass)\r\n* **[@chojrak11](https://github.com/chojrak11)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=chojrak11)\r\n* **[@MattMcFarland](https://github.com/MattMcFarland)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=MattMcFarland)\r\n* **[@thepont](https://github.com/thepont)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=thepont)\r\n* **[@BlueAccords](https://github.com/BlueAccords)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=BlueAccords)\r\n* **[@goyney](https://github.com/goyney)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=goyney)\r\n* **[@cianclarke](https://github.com/cianclarke)**\r\n  * 1 in [expressjs/session](https://github.com/expressjs/session/commits?author=cianclarke)\r\n* **[@scottymcribs](https://github.com/scottymcribs)**\r\n  * 1 in [expressjs/csurf](https://github.com/expressjs/csurf/commits?author=scottymcribs)\r\n* **[@patrickglynn](https://github.com/patrickglynn)**\r\n  * 1 in [expressjs/serve-index](https://github.com/expressjs/serve-index/commits?author=patrickglynn)\r\n* **[@taueres](https://github.com/taueres)**\r\n  * 1 in [expressjs/serve-static](https://github.com/expressjs/serve-static/commits?author=taueres)\r\n* **[@niftylettuce](https://github.com/niftylettuce)**\r\n  * 1 in [expressjs/express-paginate](https://github.com/expressjs/express-paginate/commits?author=niftylettuce)\r\n* **[@crandmck](https://github.com/crandmck)**\r\n  * 2 in [expressjs/express-api-docs](https://github.com/expressjs/express-api-docs/commits?author=crandmck)\r\n* **[@jasnell](https://github.com/jasnell)**\r\n  * 1 in [expressjs/express-api-docs](https://github.com/expressjs/express-api-docs/commits?author=jasnell)\r\n* **[@jonathanong](https://github.com/jonathanong)**\r\n  * 5 in [jshttp/http-assert](https://github.com/jshttp/http-assert/commits?author=jonathanong)\r\n  * 7 in [jshttp/spdy-push](https://github.com/jshttp/spdy-push/commits?author=jonathanong)\r\n  * 6 in [pillarjs/resolve-path](https://github.com/pillarjs/resolve-path/commits?author=jonathanong)\r\n  * 3 in [pillarjs/path-match](https://github.com/pillarjs/path-match/commits?author=jonathanong)\r\n* **[@billymoon](https://github.com/billymoon)**\r\n  * 1 in [jshttp/type-is](https://github.com/jshttp/type-is/commits?author=billymoon)\r\n  * 1 in [jshttp/mime-db](https://github.com/jshttp/mime-db/commits?author=billymoon)\r\n* **[@a-r-d](https://github.com/a-r-d)**\r\n  * 1 in [jshttp/type-is](https://github.com/jshttp/type-is/commits?author=a-r-d)\r\n* **[@glorieux-f](https://github.com/glorieux-f)**\r\n  * 1 in [jshttp/mime-db](https://github.com/jshttp/mime-db/commits?author=glorieux-f)\r\n* **[@krmannix](https://github.com/krmannix)**\r\n  * 7 in [jshttp/http-errors](https://github.com/jshttp/http-errors/commits?author=krmannix)\r\n* **[@tkrotoff](https://github.com/tkrotoff)**\r\n  * 2 in [jshttp/http-errors](https://github.com/jshttp/http-errors/commits?author=tkrotoff)\r\n* **[@CatTail](https://github.com/CatTail)**\r\n  * 1 in [pillarjs/cookies](https://github.com/pillarjs/cookies/commits?author=CatTail)\r\n* **[@dead-horse](https://github.com/dead-horse)**\r\n  * 1 in [pillarjs/cookies](https://github.com/pillarjs/cookies/commits?author=dead-horse)\r\n* **[@blakeembrey](https://github.com/blakeembrey)**\r\n  * 1 in [pillarjs/path-to-regexp](https://github.com/pillarjs/path-to-regexp/commits?author=blakeembrey)\r\n* **[@glenjamin](https://github.com/glenjamin)**\r\n  * 1 in [pillarjs/csrf](https://github.com/pillarjs/csrf/commits?author=glenjamin)\r\n* **[@Fishrock123](https://github.com/Fishrock123)**\r\n  * 7 in [pillarjs/extend-proto](https://github.com/pillarjs/extend-proto/commits?author=Fishrock123)\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2915",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2915/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2915/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2915/events",
    "html_url": "https://github.com/expressjs/express/issues/2915",
    "id": 136965406,
    "number": 2915,
    "title": "[feature request] VannilaJS SPA example with login, registration and CRUD to  postgresql/MySQL",
    "user": {
      "login": "es6Test",
      "id": 13809207,
      "avatar_url": "https://avatars.githubusercontent.com/u/13809207?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/es6Test",
      "html_url": "https://github.com/es6Test",
      "followers_url": "https://api.github.com/users/es6Test/followers",
      "following_url": "https://api.github.com/users/es6Test/following{/other_user}",
      "gists_url": "https://api.github.com/users/es6Test/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/es6Test/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/es6Test/subscriptions",
      "organizations_url": "https://api.github.com/users/es6Test/orgs",
      "repos_url": "https://api.github.com/users/es6Test/repos",
      "events_url": "https://api.github.com/users/es6Test/events{/privacy}",
      "received_events_url": "https://api.github.com/users/es6Test/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/examples",
        "name": "examples",
        "color": "5319e7"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 2,
    "created_at": "2016-02-27T20:46:27Z",
    "updated_at": "2016-04-07T21:35:48Z",
    "closed_at": null,
    "body": "Would be great if someone would show a way to make a SPA (with login, registration etc) with a relational DB postgresql + express. \r\n\r\nI have 0 interest in MEAN stacks :)\r\n"
  },
  {
    "url": "https://api.github.com/repos/expressjs/express/issues/2907",
    "repository_url": "https://api.github.com/repos/expressjs/express",
    "labels_url": "https://api.github.com/repos/expressjs/express/issues/2907/labels{/name}",
    "comments_url": "https://api.github.com/repos/expressjs/express/issues/2907/comments",
    "events_url": "https://api.github.com/repos/expressjs/express/issues/2907/events",
    "html_url": "https://github.com/expressjs/express/issues/2907",
    "id": 136189909,
    "number": 2907,
    "title": "View composers",
    "user": {
      "login": "tremby",
      "id": 199635,
      "avatar_url": "https://avatars.githubusercontent.com/u/199635?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tremby",
      "html_url": "https://github.com/tremby",
      "followers_url": "https://api.github.com/users/tremby/followers",
      "following_url": "https://api.github.com/users/tremby/following{/other_user}",
      "gists_url": "https://api.github.com/users/tremby/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tremby/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tremby/subscriptions",
      "organizations_url": "https://api.github.com/users/tremby/orgs",
      "repos_url": "https://api.github.com/users/tremby/repos",
      "events_url": "https://api.github.com/users/tremby/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tremby/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/expressjs/express/labels/ideas",
        "name": "ideas",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [],
    "milestone": null,
    "comments": 13,
    "created_at": "2016-02-24T21:21:23Z",
    "updated_at": "2016-05-03T15:32:52Z",
    "closed_at": null,
    "body": "I [posted on Stack Overflow](http://stackoverflow.com/questions/35612168/automatically-provide-data-to-express-partial-views/35612360) today with a question about whether Express provides any way to automatically have data calculated and provided to a view context, per view. Apparently not. The feature is known as a [\"view composer\" in Laravel](https://laravel.com/docs/5.2/views#view-composers).\r\n\r\nThe use case would be for things like data needed in *every* page view using a particular layout -- instead of including the same function call to get the data in every `res.render` call in every route which calls a view using that layout, and remembering to add it to new routes each time, add the data to the view composer associated with the layout view containing the widget in question. Or for a widget in a view partial used sporadically across the site which requires some database lookup or other calculation, that calculation is done in the view's composer rather than the developer having to remember which pages have the widget and which don't, and having the calculation or reference to it in all of the relevant route files. And remembering to remove that from the view context if the widget is removed.\r\n\r\nIt's also nice in the case where the views and the business logic are written by different people, like when the designer is the front end developer. The designer may decide to add or remove such a widget at some point, and now the relevant data is calculated and available, or no longer calculated when no longer needed, without the route having to be edited.\r\n\r\nI'm wondering if this is a feature others would be interested in, and how feasible it might be. Since there are myriad view engines for Express, and presumably they all handle partials and layouts in different ways, I expect this would work as a pre-render callback which is registered through Express.\r\n\r\nThat is, the developer writes something like:\r\n```js\r\napp.set('view engine', 'twig');\r\napp.set('view composer', function (view, context) {\r\n  // Whatever logic the developer wants, given the view name\r\n  // (or filename/path?), adding to or transforming the context\r\n  // such as this trivial example...\r\n  switch (view) {\r\n    case 'layout':\r\n      context.loggedIn = auth.isUserLoggedIn();\r\n      break;\r\n    case 'widgets/date':\r\n      context.date = new Date();\r\n      break;\r\n  }\r\n});\r\n```\r\n\r\nThis callback would then be called (at the responsibility of the view engine, presumably) at some point before each view file is rendered. The context can therefore be added to, with whatever data the view needs.\r\n\r\nObviously with suitable logic the developer could break these out into separate files to keep things organized.\r\n\r\nOr alternatively there could be a standard for an event fired at an equivalent suitable time, and with similar arguments, which could be listened for by the developer.\r\n\r\nAny thoughts?"
  }
]
