{
  "data": {
    "repo": {
      "issues": [
        {
          "id": 175891382,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/120",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/120/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/120/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/120/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/120",
          "number": 120,
          "state": "open",
          "title": "Small tweaks to the README",
          "body": "1/ Consistently using \"GraphQL.js\" rather than \"graphql-js\"\r\n2/ Kinda crazy but for the longest time I had been mistakenly thinking that you had to navigate to `/graphql/graphiql` to get to GraphiQL by default. Nope, it displays whenever text/html is accepted. BUT - that works anyway accidentally because it's mounted as middleware rather than an endpoint. Anyway I just removed the phrasing that alluded to this past confusion of mine.",
          "locked": false,
          "comments": 0,
          "closed_at": null,
          "created_at": "2016-09-08T23:37:08Z",
          "updated_at": "2016-09-09T22:39:37Z"
        },
        {
          "id": 174676116,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/119",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/119/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/119/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/119/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/119",
          "number": 119,
          "state": "open",
          "title": "Re-enable express etag support",
          "body": "The express `response.send` provides some extra functionality, such as adding an ETag header. https://github.com/graphql/express-graphql/commit/48e6659945477bd706fe22173f450c16eddd5bf5 removed `.send` in favor of `.end` in order to support connect. This PR adds a helper function, `sendResponse`, which calls `response.send` if that method exists (i.e. the server is express), otherwise fallback to `response.end`.\r\n\r\nIn order to test that the correct method is called, I added sinon as a devDependency and a single test that uses a spy to verify that `send` is called when the server is express. \r\n\r\nThis fixes #115",
          "locked": false,
          "comments": 2,
          "closed_at": null,
          "created_at": "2016-09-02T04:02:48Z",
          "updated_at": "2016-09-12T06:58:43Z"
        },
        {
          "id": 173294260,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/118",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/118/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/118/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/118/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/118",
          "number": 118,
          "state": "open",
          "title": "support for adding optional error handling function before returning â€¦",
          "body": "#116 the ability to modify responses and the status codes based on errors.\r\n\r\nGives the option to handle errors from responses before sending back the request. If you do not want to handle the errors, you can omit the optional `handleErrors` function and it will behave as normal. Since it is optional, it shouldn't break existing functionality. ",
          "locked": false,
          "comments": 9,
          "closed_at": null,
          "created_at": "2016-08-25T19:54:58Z",
          "updated_at": "2016-09-12T06:59:08Z"
        },
        {
          "id": 173027687,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/116",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/116/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/116/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/116/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/116",
          "number": 116,
          "state": "open",
          "title": "Surfacing HTTP Status Codes of Queries",
          "body": "**Issue:** \r\nIf a query returns a HTTP status code other than 200, express-graphql still returns 200, with the error placed in an array assigned to the `errors` property. \r\n\r\nThis can cause problems with caching. When error status codes are not set and a 200 is sent instead, the error or incomplete data will be cached. \r\n\r\n**Example:**\r\nYou are hosting an online store. Someone views a product. The product details query returns an HTTP error, but the reviews query and recommendations query do not. That product's incomplete data is now cached due to the 200 status code, instead of surfacing the product details query's status code.\r\n\r\n**Proposed Solution:**\r\nI think the simplest solution would be creating a new option `handleErrors`, a function that receives the errors array and the response object on line `247` in `src/index.js`. If option was set, invoke it, otherwise do nothing. This will allow developers to access the errors and decide how they want to handle them or modify the response before being sent.\r\n\r\nI wanted to gauge interest and feedback on this before I looked to submit a pull request. Please let me know if you would accept this PR and this proposed solution.\r\n",
          "locked": false,
          "comments": 5,
          "closed_at": null,
          "created_at": "2016-08-24T18:42:53Z",
          "updated_at": "2016-08-25T20:28:30Z"
        },
        {
          "id": 170820043,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/115",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/115/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/115/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/115/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/115",
          "number": 115,
          "state": "open",
          "title": "Broken express etag support",
          "body": "Hi,\r\n\r\nThe commit 48e6659945477bd706fe22173f450c16eddd5bf5 broke the built-in etag support of express. \r\n\r\nThis is due to using `response.write` instead of `response.send` (which has the etag generation inside) https://github.com/graphql/express-graphql/blob/master/src/index.js#L250.\r\n\r\nThe commit states that this is made to be compatible with connect. Is there a way to also support etags for express?\r\n\r\nThanks,\r\nMartin\r\n\r\n",
          "locked": false,
          "comments": 4,
          "closed_at": null,
          "created_at": "2016-08-12T08:11:23Z",
          "updated_at": "2016-08-25T05:55:48Z"
        },
        {
          "id": 170553303,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/113",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/113/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/113/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/113/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/113",
          "number": 113,
          "state": "open",
          "title": "[Proposal] Split into multiple middlewares",
          "body": "Just a idea, but I think we should embrace express middleware system.\r\n\r\nMaybe something like below:\r\n\r\n```js\r\nimport { parser, validate, execute, errorHandler, graphiql } from 'express-graphql';\r\nimport logger from 'graphql-third-party-query-param-logger';\r\n\r\nconst app = express();\r\n\r\napp.use('/graphql', parser(...));\r\napp.use('/graphql', logger(...));\r\napp.use('/graphql', validate(...));\r\napp.use('/graphql', execute(...));\r\napp.use('/graphql', errorHander(...));\r\napp.use('/graphql', graphiql(...));\r\n\r\napp.listen(3000);\r\n```\r\n\r\nAnd then we can use middlewares at any points to log and measure performance, even have more control on input, output and errors.\r\n\r\nEventually, more reasonable, extendable middlewares will born and enrich the whole graphql ecosystem.\r\n\r\nRelative issue: #101 #102 #107",
          "locked": false,
          "comments": 1,
          "closed_at": null,
          "created_at": "2016-08-11T01:15:25Z",
          "updated_at": "2016-08-25T05:28:45Z"
        },
        {
          "id": 170507673,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/112",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/112/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/112/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/112/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/112",
          "number": 112,
          "state": "open",
          "title": "Allow fallback to hosted js files without cdn",
          "body": "Tried to use graphiql provided by this package on an intranet without an internet connection, horrible experience, everything is loaded from cdn.\r\n\r\nSimilar issues in other flavours of graphiql, seems like I'm not the only one having this issue.\r\nexponentjs/koa-graphiql#1\r\n\r\nThis was already fixed in the `example/` for graphiql itself: graphql/graphiql#135\r\n\r\nCould we please have a fallback where if the cdn fails to load the files it loads a local copy?",
          "locked": false,
          "comments": 2,
          "closed_at": null,
          "created_at": "2016-08-10T20:12:49Z",
          "updated_at": "2016-08-13T01:52:28Z"
        },
        {
          "id": 166698086,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/109",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/109/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/109/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/109/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/109",
          "number": 109,
          "state": "open",
          "title": "[RFC] Persisted Document support",
          "body": "This adds support to express-graphql for GraphQL persisted documents. This is a feature we have discussed in ad-hoc ways since open sourcing GraphQL, and are now attempting to demonstrate more concretely. Persisted documents are foundational to how we use GraphQL at Facebook, especially for our mobile clients. Additional background context is being added to the README.\r\n\r\nThe goal in adding this support to express-graphql is to provide a clear example of how this idea can be implemented which should allow it to be translated to any other GraphQL server middleware or implementation.\r\n\r\nNotes:\r\n- persistValidatedDocument and providing the /persist endpoint is still a nascent idea, that needs the most scrutiny. Then once its settled, tests.",
          "locked": false,
          "comments": 5,
          "closed_at": null,
          "created_at": "2016-07-20T22:33:20Z",
          "updated_at": "2016-08-26T01:08:55Z"
        },
        {
          "id": 166490231,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/107",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/107/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/107/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/107/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/107",
          "number": 107,
          "state": "open",
          "title": "support graphql request metrics trace",
          "body": "In graphql,all request is POST and in the same url.\r\n\r\nBecause of this,the server side can not distinguish which request is slow.\r\n\r\nIn below query,is there any way to get the `TestQuery` value before graphql execute so I can trace the query name and log it's cost time?\r\n\r\n```graphql\r\nQuery TestQuery{\r\n  ping\r\n}\r\n```\r\n\r\n",
          "locked": false,
          "comments": 1,
          "closed_at": null,
          "created_at": "2016-07-20T04:06:53Z",
          "updated_at": "2016-08-25T05:16:31Z"
        },
        {
          "id": 166256988,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/106",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/106/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/106/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/106/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/106",
          "number": 106,
          "state": "open",
          "title": "return undefined instead of null in safeSerialize to make localStorage functionality back",
          "body": "According to the implementation in [graphiql](https://github.com/graphql/graphiql/blob/master/src/components/GraphiQL.js#L139) , I think we should change `null` to `undefined` in order to enable the localStorage functionality in graphiql.\r\n",
          "locked": false,
          "comments": 2,
          "closed_at": null,
          "created_at": "2016-07-19T06:24:53Z",
          "updated_at": "2016-09-12T07:01:01Z"
        },
        {
          "id": 163651750,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/104",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/104/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/104/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/104/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/104",
          "number": 104,
          "state": "open",
          "title": "Add option to format result before sending to the client",
          "body": "Adds an option to provide a function to format the result before sending to the client. My use case is to create a debug mode where I can return information about each request our GraphQL server makes to our REST API. As each request is made, the debug information is appended to the context, then returned as part of the json response.",
          "locked": false,
          "comments": 3,
          "closed_at": null,
          "created_at": "2016-07-04T10:51:16Z",
          "updated_at": "2016-09-12T07:03:37Z"
        },
        {
          "id": 162835718,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/101",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/101/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/101/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/101/events",
          "html_url": "https://github.com/graphql/express-graphql/issues/101",
          "number": 101,
          "state": "open",
          "title": "Custom GraphiQL middleware",
          "body": "Hi Lee,\r\n\r\nI just finished draft version of [GraphiQL](https://github.com/eugenehp/graphiql/tree/headers) that supports HTTP headers.\r\nI know there are multiple discussions about keeping the original GraphiQL version lean and protocol independent, which makes sense to me.\r\n\r\nSo the question is what's the best way to structure the middle ware here, so we can specify our own custom versions.\r\n\r\nAt the moment I'm using non flexible solution:\r\n`graphQLServer.use('/graphiql', express.static('graphiql'));`\r\n\r\nBut I would want to see something like this possible:\r\n\r\n```\r\nimport graphiql from 'graphiql-headers';\r\napp.use('/graphql', graphqlHTTP(request => ({\r\n  schema: MySessionAwareGraphQLSchema,\r\n  context: request.session,\r\n  graphiql: graphiql\r\n})));\r\n```\r\n\r\nWhat would be accepted as PR?\r\n\r\nThanks for your time on this.",
          "locked": false,
          "comments": 4,
          "closed_at": null,
          "created_at": "2016-06-29T03:52:54Z",
          "updated_at": "2016-08-26T23:49:44Z"
        },
        {
          "id": 162033598,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/100",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/100/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/100/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/100/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/100",
          "number": 100,
          "state": "open",
          "title": "[WIP] Add rudimentary batched query support",
          "body": "This is a WIP adding very rudimentary support for batched queries executed with the same shared execution context, when queries are specified as a JSON array.\r\n\r\nThis allows schemas using DataLoader (and sticking those DataLoaders on context) to share batching and caching across batched requests.\r\n\r\nDo you think this makes sense to have here?",
          "locked": false,
          "comments": 24,
          "closed_at": null,
          "created_at": "2016-06-23T22:01:47Z",
          "updated_at": "2016-09-12T07:07:06Z"
        },
        {
          "id": 159531845,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/97",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/97/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/97/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/97/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/97",
          "number": 97,
          "state": "open",
          "title": "Pass through the logFn option to execute",
          "body": "This PR is accommodating https://github.com/graphql/graphql-js/pull/402\r\n\r\nOnce that PR is merged, this will one will be a logical pass through.",
          "locked": false,
          "comments": 0,
          "closed_at": null,
          "created_at": "2016-06-09T23:37:19Z",
          "updated_at": "2016-09-12T07:04:27Z"
        },
        {
          "id": 152403557,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/83",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/83/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/83/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/83/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/83",
          "number": 83,
          "state": "open",
          "title": "Prepared queries",
          "body": "Helps people wanting to take `express-graphql` into production by taking a single GraphQL parsed document and only allowing requests to be made against it. Also does not parse and validate queries submitted by the client, such queries should just be a noop. Only `operationName` matters if a parsed document is set. `withDocument` is a working name, any better suggestions?",
          "locked": false,
          "comments": 7,
          "closed_at": null,
          "created_at": "2016-05-01T20:20:50Z",
          "updated_at": "2016-09-12T07:03:35Z"
        },
        {
          "id": 148403826,
          "url": "https://api.github.com/repos/graphql/express-graphql/issues/72",
          "repository_url": "https://api.github.com/repos/graphql/express-graphql",
          "labels_url": "https://api.github.com/repos/graphql/express-graphql/issues/72/labels{/name}",
          "comments_url": "https://api.github.com/repos/graphql/express-graphql/issues/72/comments",
          "events_url": "https://api.github.com/repos/graphql/express-graphql/issues/72/events",
          "html_url": "https://github.com/graphql/express-graphql/pull/72",
          "number": 72,
          "state": "open",
          "title": "Allow passing \"limit\" option into express-graphql",
          "body": "I decided to do file uploading with GraphQL using base64, thus needed to raise the request body limit and implemented an option for it. Is this useful in the main branch?",
          "locked": false,
          "comments": 6,
          "closed_at": null,
          "created_at": "2016-04-14T15:48:14Z",
          "updated_at": "2016-09-12T07:03:17Z"
        }
      ]
    }
  }
}
